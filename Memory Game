<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Memory Maze Race: Chapter 10 Review</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;800&display=swap');
        body { font-family: 'Inter', sans-serif; background-color: #f7f7f7; }
        .card { background: white; border-radius: 1rem; box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1); }
        .question-box { min-height: 150px; }
        .category-chip { padding: 0.5rem 1rem; border-radius: 9999px; font-weight: 600; }
        .btn-answer { transition: background-color 0.3s, transform 0.1s; }
        .btn-answer:hover { transform: translateY(-2px); }
        #message-box { background-color: #ffedd5; color: #9a3412; border-left: 4px solid #f97316; }
    </style>
</head>
<body class="p-4 md:p-8 flex items-center justify-center min-h-screen">

    <div id="app" class="w-full max-w-4xl">
        <header class="text-center mb-8">
            <h1 class="text-5xl font-extrabold text-blue-800 tracking-tighter">Memory Maze Race</h1>
            <p class="text-xl text-gray-600 mt-2">Chapter 10: Memory and Thought Review</p>
        </header>

        <!-- Message Box for Feedback (Replaces alert()) -->
        <div id="message-box" class="hidden p-4 mb-6 rounded-lg text-lg"></div>

        <div class="card p-6 md:p-10">
            <div id="quiz-container">
                <div class="flex justify-between items-center mb-6 border-b pb-4">
                    <span id="current-question-display" class="text-2xl font-bold text-gray-700">Question 1/10</span>
                    <span id="category-chip" class="category-chip bg-indigo-200 text-indigo-800">Systems & Processes</span>
                </div>

                <!-- Question Display -->
                <div id="question-text" class="question-box text-3xl font-light text-gray-900 mb-8 flex items-center justify-center text-center">
                    Loading question...
                </div>

                <!-- Answer Buttons -->
                <div id="options-container" class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <!-- Answer buttons will be injected here by JavaScript -->
                </div>

                <div class="mt-8 flex justify-center">
                    <button id="next-button" onclick="nextQuestion()" class="hidden bg-green-600 text-white px-8 py-3 rounded-xl font-bold text-xl hover:bg-green-700 focus:outline-none focus:ring-4 focus:ring-green-300">
                        Next Question &rarr;
                    </button>
                </div>
            </div>

            <!-- Score/Results Display -->
            <div id="results-container" class="hidden text-center p-8">
                <h2 class="text-4xl font-extrabold text-blue-800 mb-4">Race Complete!</h2>
                <p class="text-2xl text-gray-700 mb-6">Your Team Score: <span id="final-score" class="text-green-600 font-extrabold">0</span> / 10</p>
                <p class="text-lg text-gray-600">Time to review those tricky concepts! Focus on Recognition vs. Recall and the components of the Information-Processing Model.</p>
                <button onclick="startGame()" class="mt-6 bg-blue-600 text-white px-8 py-3 rounded-xl font-bold text-xl hover:bg-blue-700 focus:outline-none focus:ring-4 focus:ring-blue-300">
                    Play Again
                </button>
            </div>
        </div>
    </div>

    <script>
        // Game State Variables
        let currentQuestionIndex = 0;
        let score = 0;

        // The question bank is based on the Learning Goals and Chapter Resources (Quizzes, Graphic Organizers, Vocabulary)
        const questions = [
            {
                text: "According to the Information-Processing Model, which system holds a large amount of sensory input for only a fraction of a second?",
                options: ["Short-Term Memory", "Long-Term Memory", "Sensory Memory", "Working Memory"],
                answer: "Sensory Memory",
                category: "Systems & Processes"
            },
            {
                text: "What is the term for a memory retrieval process where a person identifies an object, idea, or situation as one they have or have not experienced before (like a multiple-choice test)?",
                options: ["Recall", "Relearning", "Recognition", "Encoding"],
                answer: "Recognition",
                category: "Retrieval & Forgetting"
            },
            {
                text: "The process of grouping or organizing information into manageable units to fit more into Short-Term Memory is called...",
                options: ["Maintenance Rehearsal", "Encoding Failure", "Chunking", "Acoustic Codes"],
                answer: "Chunking",
                category: "Vocabulary/Concepts"
            },
            {
                text: "What theory suggests that forgetting occurs simply because the memory trace fades over time if not used?",
                options: ["Interference", "Amnesia", "Decay", "Repression"],
                answer: "Decay",
                category: "Retrieval & Forgetting"
            },
            {
                text: "Which type of Long-Term Memory stores general knowledge and facts, such as the capital of France or the steps in the scientific method?",
                options: ["Episodic Memory", "Semantic Memory", "Implicit Memory", "Procedural Memory"],
                answer: "Semantic Memory",
                category: "Systems & Processes"
            },
            {
                text: "What concept, often studied by researchers like Elizabeth Loftus, explains how new information or leading questions can alter the original memory of an event (like in the Eyewitness Testimony case study)?",
                options: ["Confabulation", "Source Amnesia", "Reconstructive Memory", "State-Dependent Learning"],
                answer: "Reconstructive Memory",
                category: "Retrieval & Forgetting"
            },
            {
                text: "What is the final stage of the three memory processes that involves locating and bringing stored information back into conscious thought?",
                options: ["Encoding", "Retrieval", "Storage", "Maintenance"],
                answer: "Retrieval",
                category: "Systems & Processes"
            },
            {
                text: "The ability to remember a list of items by creating a catchy phrase or jingle is an example of a(n)...",
                options: ["Confabulation", "Mnemonic Device", "Proactive Interference", "Acoustic Code"],
                answer: "Mnemonic Device",
                category: "Vocabulary/Concepts"
            },
            {
                text: "Which process of memory is analogous to typing information into a computer (converting sensory input into a form usable by the memory system)?",
                options: ["Storage", "Retrieval", "Decoding", "Encoding"],
                answer: "Encoding",
                category: "Systems & Processes"
            },
            {
                text: "What happens when new learning interferes with the ability to recall old information?",
                options: ["Proactive Interference", "Retroactive Interference", "Repression", "Decay"],
                answer: "Retroactive Interference",
                category: "Retrieval & Forgetting"
            }
        ];

        // Utility function to shuffle array
        function shuffleArray(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
        }

        function showMessage(message, isCorrect) {
            const msgBox = document.getElementById('message-box');
            msgBox.textContent = message;
            msgBox.classList.remove('hidden');

            if (isCorrect) {
                msgBox.classList.remove('bg-red-200', 'text-red-800', 'border-red-600');
                msgBox.classList.add('bg-green-200', 'text-green-800', 'border-green-600');
            } else {
                msgBox.classList.remove('bg-green-200', 'text-green-800', 'border-green-600');
                msgBox.classList.add('bg-red-200', 'text-red-800', 'border-red-600');
            }
        }

        function hideMessage() {
            document.getElementById('message-box').classList.add('hidden');
        }

        function loadQuestion() {
            hideMessage();
            document.getElementById('next-button').classList.add('hidden');

            if (currentQuestionIndex >= questions.length) {
                showResults();
                return;
            }

            const q = questions[currentQuestionIndex];
            document.getElementById('current-question-display').textContent = `Question ${currentQuestionIndex + 1}/${questions.length}`;
            document.getElementById('question-text').textContent = q.text;
            document.getElementById('category-chip').textContent = q.category;

            const optionsContainer = document.getElementById('options-container');
            optionsContainer.innerHTML = '';

            // Shuffle options for interactivity
            const shuffledOptions = [...q.options];
            shuffleArray(shuffledOptions);

            shuffledOptions.forEach(option => {
                const button = document.createElement('button');
                button.textContent = option;
                button.classList.add('btn-answer', 'bg-blue-500', 'text-white', 'py-4', 'rounded-xl', 'text-lg', 'font-semibold', 'hover:bg-blue-600');
                button.onclick = () => checkAnswer(option, q.answer, button);
                button.disabled = false;
                optionsContainer.appendChild(button);
            });
        }

        function checkAnswer(selectedOption, correctAnswer, buttonElement) {
            // Disable all buttons after one is clicked
            Array.from(document.getElementById('options-container').children).forEach(btn => btn.disabled = true);

            const isCorrect = selectedOption === correctAnswer;

            if (isCorrect) {
                score++;
                buttonElement.classList.remove('bg-blue-500', 'hover:bg-blue-600');
                buttonElement.classList.add('bg-green-500');
                showMessage("Correct! You've successfully retrieved that memory.", true);
            } else {
                buttonElement.classList.remove('bg-blue-500', 'hover:bg-blue-600');
                buttonElement.classList.add('bg-red-500');
                // Highlight the correct answer
                Array.from(document.getElementById('options-container').children)
                    .find(btn => btn.textContent === correctAnswer)
                    .classList.add('bg-green-500');
                showMessage(`Incorrect. The correct answer was: ${correctAnswer}.`, false);
            }

            document.getElementById('next-button').classList.remove('hidden');
        }

        function nextQuestion() {
            currentQuestionIndex++;
            loadQuestion();
        }

        function showResults() {
            document.getElementById('quiz-container').classList.add('hidden');
            document.getElementById('results-container').classList.remove('hidden');
            document.getElementById('final-score').textContent = score;
            hideMessage();
        }

        function startGame() {
            // Reset game state
            currentQuestionIndex = 0;
            score = 0;
            
            // Shuffle questions at the start of the game
            shuffleArray(questions);

            // Show quiz, hide results
            document.getElementById('quiz-container').classList.remove('hidden');
            document.getElementById('results-container').classList.add('hidden');
            
            loadQuestion();
        }

        // Initialize the game on load
        window.onload = startGame;
    </script>
</body>
</html>

